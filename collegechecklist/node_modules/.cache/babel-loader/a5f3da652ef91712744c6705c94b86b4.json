{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/irenabrain/Documents/GitHub/CollegeChecklist/collegechecklist/src/Hooks/index.jsx\",\n    _s = $RefreshSig$();\n\n// import { useState,useEffect } from \"react\";\n// import Moment from 'react-Moment';\n// import { fb } from '../firebase';\n// import {auth} from '../firebase';\n// export const useTasks = selectedCollege => {\n//     const [tasks, setTasks] = useState([]);\n//     const [archivedTasks, setArchivedTasks] = useState([]);\n//     useEffect(() => {\n//       const user = auth.currentUser;\n//       let unsubscribe = fb\n//         .firestore()\n//         .collection('tasks')\n//         .where('userID', '==', user.uid);\n//         unsubscribe = unsubscribe.onSnapshot(snapshot => {\n//           let newTasks = snapshot.docs.map(task => ({\n//             id: task.id,\n//             ...task.data()\n//           }));\n//           let filteredTasks = [];\n//           selectedCollege !== \"INBOX\" &&\n//           selectedCollege !== \"TODAY\" &&\n//           selectedCollege !== \"NEXT_7\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task => task.selectedCollegeId === selectedCollege && task.archived !== true\n//               ))\n//             : selectedCollege === \"INBOX\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task => task.date === \"\" && task.archived !== true\n//               ))\n//             : selectedCollege === \"TODAY\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task =>\n//                   task.date === Moment().format(\"DD/MM/YYYY\") &&\n//                   task.archived !== true\n//               ))\n//             : selectedCollege === \"NEXT_7\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task =>\n//                   Moment(task.date, \"DD/MM/YYYY\").diff(Moment(), \"days\") <= 7 &&\n//                   Moment(task.date, \"DD/MM/YYYY\").diff(Moment(), \"days\") > 1 &&\n//                   task.archived !== true\n//               ))\n//             : (filteredTasks = newTasks);\n//           setTasks(filteredTasks);\n//           setArchivedTasks(newTasks.filter(task => task.archived !== false));\n//         });\n//       }, [selectedCollege]);\n//     return { tasks, archivedTasks };\n//   };\n//   export const useColleges = () => {\n//     const [colleges, setColleges] = useState([]);\n//     useEffect(() => {\n//       const user = auth.currentUser;\n//       fb\n//         .firestore()\n//         .collection('colleges')\n//         .where('userID', '==', user.uid)\n//         .orderBy('collegeID')\n//         .get()\n//         .then(snapshot => {\n//           const allColleges = snapshot.docs.map(college => ({\n//             ...college.data(),\n//             docId: college.id,\n//           }));\n//           if (JSON.stringify(allColleges) !== JSON.stringify(colleges)) {\n//             setColleges(allColleges);\n//           }\n//         });\n//     }, [colleges]);\n//     return { colleges, setColleges };\n//   };\nimport React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst App = () => {\n  _s();\n\n  const [list, setList] = React.useState(initialList);\n  const [name, setName] = React.useState('');\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  function handleAdd() {\n    const newList = list.concat({\n      name,\n      id: uuidv4()\n    });\n    setList(newList);\n    setName('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAdd,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"sc3UCLYptgDKT5sZF4y78bVphe4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/irenabrain/Documents/GitHub/CollegeChecklist/collegechecklist/src/Hooks/index.jsx"],"names":["React","v4","uuidv4","App","list","setList","useState","initialList","name","setName","handleChange","event","target","value","handleAdd","newList","concat","id","map","item"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACM,QAAN,CAAeC,WAAf,CAAxB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACM,QAAN,CAAe,EAAf,CAAxB;;AAEA,WAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BF,IAAAA,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD;;AAED,WAASC,SAAT,GAAqB;AACnB,UAAMC,OAAO,GAAGX,IAAI,CAACY,MAAL,CAAY;AAAER,MAAAA,IAAF;AAAQS,MAAAA,EAAE,EAAEf,MAAM;AAAlB,KAAZ,CAAhB;AAEAG,IAAAA,OAAO,CAACU,OAAD,CAAP;AAEAN,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAED,IAA1B;AAAgC,QAAA,QAAQ,EAAEE;AAA1C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEI,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAA,gBACGV,IAAI,CAACc,GAAL,CAAUC,IAAD,iBACR;AAAA,kBAAmBA,IAAI,CAACX;AAAxB,SAASW,IAAI,CAACF,EAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAhCD;;GAAMd,G;;KAAAA,G","sourcesContent":["// import { useState,useEffect } from \"react\";\n// import Moment from 'react-Moment';\n// import { fb } from '../firebase';\n// import {auth} from '../firebase';\n\n// export const useTasks = selectedCollege => {\n    \n//     const [tasks, setTasks] = useState([]);\n//     const [archivedTasks, setArchivedTasks] = useState([]);\n  \n//     useEffect(() => {\n//       const user = auth.currentUser;\n//       let unsubscribe = fb\n//         .firestore()\n//         .collection('tasks')\n//         .where('userID', '==', user.uid);\n  \n//         unsubscribe = unsubscribe.onSnapshot(snapshot => {\n//           let newTasks = snapshot.docs.map(task => ({\n//             id: task.id,\n//             ...task.data()\n//           }));\n    \n//           let filteredTasks = [];\n    \n//           selectedCollege !== \"INBOX\" &&\n//           selectedCollege !== \"TODAY\" &&\n//           selectedCollege !== \"NEXT_7\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task => task.selectedCollegeId === selectedCollege && task.archived !== true\n//               ))\n//             : selectedCollege === \"INBOX\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task => task.date === \"\" && task.archived !== true\n//               ))\n//             : selectedCollege === \"TODAY\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task =>\n//                   task.date === Moment().format(\"DD/MM/YYYY\") &&\n//                   task.archived !== true\n//               ))\n//             : selectedCollege === \"NEXT_7\"\n//             ? (filteredTasks = newTasks.filter(\n//                 task =>\n//                   Moment(task.date, \"DD/MM/YYYY\").diff(Moment(), \"days\") <= 7 &&\n//                   Moment(task.date, \"DD/MM/YYYY\").diff(Moment(), \"days\") > 1 &&\n//                   task.archived !== true\n//               ))\n//             : (filteredTasks = newTasks);\n    \n//           setTasks(filteredTasks);\n    \n//           setArchivedTasks(newTasks.filter(task => task.archived !== false));\n//         });\n//       }, [selectedCollege]);\n      \n  \n//     return { tasks, archivedTasks };\n//   };\n\n\n  \n//   export const useColleges = () => {\n//     const [colleges, setColleges] = useState([]);\n  \n//     useEffect(() => {\n//       const user = auth.currentUser;\n//       fb\n//         .firestore()\n//         .collection('colleges')\n//         .where('userID', '==', user.uid)\n//         .orderBy('collegeID')\n//         .get()\n//         .then(snapshot => {\n//           const allColleges = snapshot.docs.map(college => ({\n//             ...college.data(),\n//             docId: college.id,\n//           }));\n  \n//           if (JSON.stringify(allColleges) !== JSON.stringify(colleges)) {\n//             setColleges(allColleges);\n//           }\n//         });\n//     }, [colleges]);\n  \n//     return { colleges, setColleges };\n//   };\n\nimport React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n \n \nconst App = () => {\n  const [list, setList] = React.useState(initialList);\n  const [name, setName] = React.useState('');\n \n  function handleChange(event) {\n    setName(event.target.value);\n  }\n \n  function handleAdd() {\n    const newList = list.concat({ name, id: uuidv4() });\n \n    setList(newList);\n \n    setName('');\n  }\n \n  return (\n    <div>\n      <div>\n        <input type=\"text\" value={name} onChange={handleChange} />\n        <button type=\"button\" onClick={handleAdd}>\n          Add\n        </button>\n      </div>\n \n      <ul>\n        {list.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n "]},"metadata":{},"sourceType":"module"}