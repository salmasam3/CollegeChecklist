{"ast":null,"code":"import firebase from \"@firebase/app\";\nimport \"@firebase/auth\";\nimport \"@firebase/firestore\";\nimport \"@firebase/storage\"; // Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCeMHyngtmHnQELdImMT9PSYbBpzoNjYlQ\",\n  authDomain: \"collegechecklist-8927c.firebaseapp.com\",\n  databaseURL: \"https://collegechecklist-8927c.firebaseio.com\",\n  projectId: \"collegechecklist-8927c\",\n  storageBucket: \"collegechecklist-8927c.appspot.com\",\n  messagingSenderId: \"142865636759\",\n  appId: \"1:142865636759:web:a142f9e256838e980178d2\",\n  measurementId: \"G-REYNJPMMLL\"\n}; // Initialize Firebase\n\nexport const fb = firebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storage = firebase.storage();\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      email,\n      displayName,\n      photoURL\n    } = user;\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        photoURL,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n};","map":{"version":3,"sources":["/Users/irenabrain/Documents/GitHub/CollegeChecklist/collegechecklist/src/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fb","initializeApp","auth","firestore","storage","provider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","generateUserDocument","user","additionalData","userRef","doc","uid","snapshot","get","exists","email","displayName","photoURL","set","error","console","getUserDocument","userDocument","data"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAO,gBAAP;AACA,OAAO,qBAAP;AACA,OAAO,mBAAP,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,wCAFO;AAGnBC,EAAAA,WAAW,EAAE,+CAHM;AAInBC,EAAAA,SAAS,EAAE,wBAJQ;AAKnBC,EAAAA,aAAa,EAAE,oCALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB,C,CAWA;;AACA,OAAO,MAAMC,EAAE,GAAGV,QAAQ,CAACW,aAAT,CAAuBV,cAAvB,CAAX;AAEP,OAAO,MAAMW,IAAI,GAAGZ,QAAQ,CAACY,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AACP,OAAO,MAAMC,OAAO,GAAGd,QAAQ,CAACc,OAAT,EAAhB;AAEP,MAAMC,QAAQ,GAAG,IAAIf,QAAQ,CAACY,IAAT,CAAcI,kBAAlB,EAAjB;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClCL,EAAAA,IAAI,CAACM,eAAL,CAAqBH,QAArB;AACH,CAFM;AAIP,OAAO,MAAMI,oBAAoB,GAAG,OAAOC,IAAP,EAAaC,cAAb,KAAgC;AAChE,MAAI,CAACD,IAAL,EAAW;AAEX,QAAME,OAAO,GAAGT,SAAS,CAACU,GAAV,CAAe,SAAQH,IAAI,CAACI,GAAI,EAAhC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,QAAmCV,IAAzC;;AACA,QAAI;AACF,YAAME,OAAO,CAACS,GAAR,CAAY;AAChBF,QAAAA,WADgB;AAEhBD,QAAAA,KAFgB;AAGhBE,QAAAA,QAHgB;AAIhB,WAAGT;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOW,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACD;AACF;;AACD,SAAOE,eAAe,CAACd,IAAI,CAACI,GAAN,CAAtB;AACH,CApBM;;AAqBP,MAAMU,eAAe,GAAG,MAAMV,GAAN,IAAa;AACjC,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;;AACV,MAAI;AACF,UAAMW,YAAY,GAAG,MAAMtB,SAAS,CAACU,GAAV,CAAe,SAAQC,GAAI,EAA3B,EAA8BE,GAA9B,EAA3B;AACA,WAAO;AACLF,MAAAA,GADK;AAEL,SAAGW,YAAY,CAACC,IAAb;AAFE,KAAP;AAID,GAND,CAME,OAAOJ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD;AACJ,CAXD","sourcesContent":["import firebase from \"@firebase/app\";\nimport \"@firebase/auth\";\nimport \"@firebase/firestore\";\nimport \"@firebase/storage\";\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCeMHyngtmHnQELdImMT9PSYbBpzoNjYlQ\",\n    authDomain: \"collegechecklist-8927c.firebaseapp.com\",\n    databaseURL: \"https://collegechecklist-8927c.firebaseio.com\",\n    projectId: \"collegechecklist-8927c\",\n    storageBucket: \"collegechecklist-8927c.appspot.com\",\n    messagingSenderId: \"142865636759\",\n    appId: \"1:142865636759:web:a142f9e256838e980178d2\",\n    measurementId: \"G-REYNJPMMLL\"\n};\n\n// Initialize Firebase\nexport const fb = firebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storage = firebase.storage();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n    auth.signInWithPopup(provider);\n};\n\nexport const generateUserDocument = async (user, additionalData) => {\n    if (!user) return;\n\n    const userRef = firestore.doc(`users/${user.uid}`);\n    const snapshot = await userRef.get();\n    \n    if (!snapshot.exists) {\n      const { email, displayName, photoURL } = user;\n      try {\n        await userRef.set({\n          displayName,\n          email,\n          photoURL,\n          ...additionalData\n        });\n      } catch (error) {\n        console.error(\"Error creating user document\", error);\n      }\n    }\n    return getUserDocument(user.uid);\n};\nconst getUserDocument = async uid => {\n    if (!uid) return null;\n    try {\n      const userDocument = await firestore.doc(`users/${uid}`).get();\n      return {\n        uid,\n        ...userDocument.data()\n      };\n    } catch (error) {\n      console.error(\"Error fetching user\", error);\n    }\n};\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}