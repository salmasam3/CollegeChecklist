{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport moment from 'moment';\nimport { fb } from '../firebase';\nimport { auth } from '../firebase';\nexport const useTasks = selectedCollege => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n  useEffect(() => {\n    const user = auth.currentUser;\n    let unsubscribe = fb.firestore().collection('tasks').where('userID', '==', user.uid);\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\n      let newTasks = snapshot.docs.map(task => ({\n        id: task.id,\n        ...task.data()\n      }));\n      let filteredTasks = [];\n      selectedCollege !== \"INBOX\" && selectedCollege !== \"TODAY\" && selectedCollege !== \"NEXT_7\" ? filteredTasks = newTasks.filter(task => task.selectedCollegeId === selectedCollege && task.archived !== true) : selectedCollege === \"INBOX\" ? filteredTasks = newTasks.filter(task => task.date === \"\" && task.archived !== true) : selectedCollege === \"TODAY\" ? filteredTasks = newTasks.filter(task => task.date === moment().format(\"DD/MM/YYYY\") && task.archived !== true) : selectedCollege === \"NEXT_7\" ? filteredTasks = newTasks.filter(task => moment(task.date, \"DD/MM/YYYY\").diff(moment(), \"days\") <= 7 && moment(task.date, \"DD/MM/YYYY\").diff(moment(), \"days\") > 1 && task.archived !== true) : filteredTasks = newTasks;\n      setTasks(filteredTasks);\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\n    });\n  }, [selectedCollege]);\n  return {\n    tasks,\n    archivedTasks\n  };\n};\n\n_s(useTasks, \"lkbYbSuB/cNTkTVEXjLheUMZ+l8=\");\n\nexport const useColleges = () => {\n  _s2();\n\n  const [colleges, setColleges] = useState([]);\n  useEffect(() => {\n    const user = auth.currentUser;\n    fb.firestore().collection('colleges').where('userID', '==', user.uid).orderBy('collegeID').get().then(snapshot => {\n      const allColleges = snapshot.docs.map(college => ({ ...college.data(),\n        docId: college.id\n      }));\n\n      if (JSON.stringify(allColleges) !== JSON.stringify(colleges)) {\n        setColleges(allColleges);\n      }\n    });\n  }, [colleges]);\n  return {\n    colleges,\n    setColleges\n  };\n};\n\n_s2(useColleges, \"VHk19bTtS3XKsQFBq/Z/HH2HhPs=\");","map":{"version":3,"sources":["/Users/irenabrain/Documents/GitHub/CollegeChecklist/collegechecklist/src/Hooks/index.jsx"],"names":["useState","useEffect","moment","fb","auth","useTasks","selectedCollege","tasks","setTasks","archivedTasks","setArchivedTasks","user","currentUser","unsubscribe","firestore","collection","where","uid","onSnapshot","snapshot","newTasks","docs","map","task","id","data","filteredTasks","filter","selectedCollegeId","archived","date","format","diff","useColleges","colleges","setColleges","orderBy","get","then","allColleges","college","docId","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState,useEffect } from \"react\";\nimport moment from 'moment';\nimport { fb } from '../firebase';\nimport {auth} from '../firebase';\n\nexport const useTasks = selectedCollege => {\n    \n    const [tasks, setTasks] = useState([]);\n    const [archivedTasks, setArchivedTasks] = useState([]);\n  \n    useEffect(() => {\n      const user = auth.currentUser;\n      let unsubscribe = fb\n        .firestore()\n        .collection('tasks')\n        .where('userID', '==', user.uid);\n  \n        unsubscribe = unsubscribe.onSnapshot(snapshot => {\n          let newTasks = snapshot.docs.map(task => ({\n            id: task.id,\n            ...task.data()\n          }));\n    \n          let filteredTasks = [];\n    \n          selectedCollege !== \"INBOX\" &&\n          selectedCollege !== \"TODAY\" &&\n          selectedCollege !== \"NEXT_7\"\n            ? (filteredTasks = newTasks.filter(\n                task => task.selectedCollegeId === selectedCollege && task.archived !== true\n              ))\n            : selectedCollege === \"INBOX\"\n            ? (filteredTasks = newTasks.filter(\n                task => task.date === \"\" && task.archived !== true\n              ))\n            : selectedCollege === \"TODAY\"\n            ? (filteredTasks = newTasks.filter(\n                task =>\n                  task.date === moment().format(\"DD/MM/YYYY\") &&\n                  task.archived !== true\n              ))\n            : selectedCollege === \"NEXT_7\"\n            ? (filteredTasks = newTasks.filter(\n                task =>\n                  moment(task.date, \"DD/MM/YYYY\").diff(moment(), \"days\") <= 7 &&\n                  moment(task.date, \"DD/MM/YYYY\").diff(moment(), \"days\") > 1 &&\n                  task.archived !== true\n              ))\n            : (filteredTasks = newTasks);\n    \n          setTasks(filteredTasks);\n    \n          setArchivedTasks(newTasks.filter(task => task.archived !== false));\n        });\n      }, [selectedCollege]);\n      \n  \n    return { tasks, archivedTasks };\n  };\n\n\n  \n  export const useColleges = () => {\n    const [colleges, setColleges] = useState([]);\n  \n    useEffect(() => {\n      const user = auth.currentUser;\n      fb\n        .firestore()\n        .collection('colleges')\n        .where('userID', '==', user.uid)\n        .orderBy('collegeID')\n        .get()\n        .then(snapshot => {\n          const allColleges = snapshot.docs.map(college => ({\n            ...college.data(),\n            docId: college.id,\n          }));\n  \n          if (JSON.stringify(allColleges) !== JSON.stringify(colleges)) {\n            setColleges(allColleges);\n          }\n        });\n    }, [colleges]);\n  \n    return { colleges, setColleges };\n  };"]},"metadata":{},"sourceType":"module"}